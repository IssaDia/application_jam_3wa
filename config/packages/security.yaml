security:
  enable_authenticator_manager: true

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern: ^/api/login_check
      stateless: true
      json_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    api:
      pattern: ^/api
      stateless: true
      jwt: ~

    main:
      lazy:
        true
        # provider that you set earlier inside providers
      provider: app_user_provider
      json_login:
        check_path: api_login
        success_handler: lexik_jwt_authentication.handler.authentication_success
    # form_login:
    #   login_path: login
    #   check_path: login
    #   default_target_path: home
  password_hashers:
    App\Entity\User:
      algorithm: auto

  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
    # used to reload user from session & other features (e.g. switch_user)

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#the-firewall

    # https://symfony.com/doc/current/security/impersonating_user.html
    # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used

  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    # - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
when@test:
  security:
